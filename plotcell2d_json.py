# -*- coding: utf-8 -*-
"""plotcell2d_JSON.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZsG6jUP2pIAs5iPtblgN_DncBAJcPfAC
"""

import math
import os
import random
import json
import matplotlib.pyplot as plt
import numpy as np


def load_json(json_path):
    with open(json_path, 'r') as json_file:
        data = json.load(json_file)
    return data


def organize_contours_by_depth(dict_of_dicts):
    result_dict = {}

    for _, d in dict_of_dicts.items():
        for key, value in d.items():
            if key in result_dict:
                result_dict[key].extend(value)
            else:
                result_dict[key] = value

    return result_dict


def plot_contours_with_depths(contours_by_depth, depths_to_plot, legend_handles, plot_mirrors_too=True):
    colors = plt.cm.viridis(np.linspace(0, 1, len(depths_to_plot)))
    for depth, color in zip(depths_to_plot, colors):
        contours_at_depth = contours_by_depth.get(depth, [])
        depth = int(depth)
        if contours_at_depth:
            for contour in contours_at_depth:
                contour = np.array(contour)
                linewidth = 5.0 * math.log(depth)
                gapwidth = 5.0 / math.log(depth)
                x = [point['x'] for point in contour]
                y = [point['y'] for point in contour]
                line, = plt.plot(x, y, color=color, ls=(0, (linewidth, gapwidth)))
                if plot_mirrors_too:
                    line, = plt.plot(-x, y, color=color, ls=(0, (linewidth, gapwidth)))
            legend_handles.append(line)


def plot_contour_centers(contours_by_depth, depths_to_plot, legend_handles, plot_mirrors_too=True):
    colors = plt.cm.viridis(np.linspace(0, 1, len(depths_to_plot)))
    for depth, color in zip(depths_to_plot, colors):
        contours_at_depth = contours_by_depth.get(depth, [])
        if contours_at_depth:
            for contour in contours_at_depth:
                contour = np.array(contour)
                center = np.mean(contour[:, 0:2], axis=0)
                line, = plt.plot(center[0], center[1], color=color, marker='o')
                if plot_mirrors_too:
                    line, = plt.plot(-center[0], center[1], color=color, marker='o')
            legend_handles.append(line)


def add_target_rings(num_rings):
    radmult = 2
    # Adding concentric circles with dashed black lines
    theta = np.linspace(0, 2 * np.pi, 100)  # Points around the circle
    for i in range(1, num_rings + 1):
        x = i * np.cos(theta) * radmult
        y = i * np.sin(theta) * radmult
        plt.plot(x, y, color='pink', linestyle='dashed', linewidth=1.5)


def show_plots(legend_handles, depths_to_plot):
    plt.legend(legend_handles, [f"Depth {depth}" for depth in depths_to_plot], loc='upper left')
    plt.xlabel('X')
    plt.ylabel('Y')
    plt.title('V4 Receptive Fields')
    plt.axis('equal')
    plt.show()
    
    
def subsample(data, n):
    subsample_keys = random.sample(data.keys(), n)
    subsample_dict = {key: data[key] for key in subsample_keys}
    return subsample_dict


if __name__ == "__main__":
    depths_to_plot = ['3', '4', '5', '6', '7', '8']
    legend_handles = []

    json_path = 'data.json'  # Replace with the actual path to your JSON file
    data = load_json(json_path)
    
    data_subset = subsample(data, 3)

    contours = organize_contours_by_depth(data_subset)

    plot_contours_with_depths(contours, depths_to_plot, legend_handles, plot_mirrors_too=False)

    # Adding the contour centers plot
    # plot_contour_centers(contours_by_depth, depths_to_plot, legend_handles, plot_mirrors_too=False)

    add_target_rings(10)
    show_plots(legend_handles, depths_to_plot)